#######################################################################
#
# Gert's zshenv dotfile
# ~~~~~~~~~~~~~~~~~~~~~
#
# Just because I always forget this, this is the order in which zsh
# reads its startup/shutdown files (taken from `man zshall`)
#
# A couple of notes:
# If ZDOTDIR is not set, HOME is used instead.
#
# 1. /etc/zshenv            # this can't be overridden
# 2. $ZDOTDIR/.zshenv       # for all shells           <-- you are here
# 3. /etc/zprofile          # for login shells
# 4. $ZDOTDIR/.zprofile     # for login shells
# 5. /etc/zshrc             # for interactive shells
# 6. $ZDOTDIR/.zshrc        # for interactive shells
# 7. /etc/zlogin            # for login shells
# 8. $ZDOTDIR/.zlogin       # for login shells
#
#######################################################################

MACOS=false
LINUX=false
WSL=false
case $(uname) in
    Darwin) MACOS=true ;;
    Linux)  LINUX=true ;;
esac
if [ -f /proc/sys/fs/binfmt_misc/WSLInterop ]; then
    WSL=true
fi

# let's use chatgpt if we have an api key
if [ -f $HOME/.openai/api-key ]; then
    export OPENAI_API_KEY=$(cat $HOME/.openai/api-key)
fi

#############################################################################
# Configure homebrew and other package-y tools
#############################################################################

# Where is homebrew? Either on $PATH, or where it installs on M1 macs,
# or where it's installed on x86 macs. Or it's not installed at all.
# In that case, we just use the NULL command `:` for brew. Stuff will
# probably break in that case.
if command -v brew &> /dev/null; then
    brew=$(command -v brew)
elif [ -x /opt/homebrew/bin/brew ]; then
    brew=/opt/homebrew/bin/brew
elif [ -x /usr/local/bin/brew ]; then
    brew=/usr/local/bin/brew
else
    brew=":"
fi
# let homebrew amend our PATH, MANPATH, and a bunch of other things.
eval "$($brew shellenv)"

# If we have asdf, use it
if $MACOS && [ -f $(brew --prefix asdf)/libexec/asdf.sh ]; then
    source $(brew --prefix asdf)/libexec/asdf.sh
fi

# Make Python happy - make sure this is below the homebrew stuff above,
# so the pyenv shims directory appears first in PATH.
if [ -d $HOME/.pyenv ]; then
    export PYENV_ROOT=$HOME/.pyenv
    export PATH="$PYENV_ROOT/bin${PATH+:$PATH}"
fi
if command -v pyenv 1>/dev/null 2>&1; then
    eval "$(pyenv init -)"
    # use pyenv-virtualenv if it's installed.
    # see https://github.com/pyenv/pyenv-virtualenv
    # Note that this will use venv under the hood for pythons â‰¥ 3.3.
    if pyenv commands | grep -q virtualenv-init; then
        eval "$(pyenv virtualenv-init -)"
    fi
fi
# support for pipx
if [ -d $HOME/.local/bin ]; then
    export PATH="$HOME/.local/bin${PATH+:$PATH}"
fi
# Make Poetry (python package manager) happy
if [ -f $HOME/.local/bin/poetry ]; then
    export PATH="$HOME/.local/bin${PATH+:$PATH}"
fi
# support for rye
if [ -f $HOME/.rye/env ]; then
    source "$HOME/.rye/env"
fi
# support for rust and uv
if [ -f $HOME/.cargo/env ]; then
    source "$HOME/.cargo/env"
fi

# Make Modular's Mojo happy
# (super fast python-like compiler, see https://www.modular.com/max/mojo)
export MODULAR_HOME="$HOME/.modular"
export PATH="$MODULAR_HOME/pkg/packages.modular.com_mojo/bin${PATH+:$PATH}"

# Make Go happy
export PATH="$HOME/go/bin${PATH+:$PATH}"

# Add user gemdir binaries to PATH
if command -v ruby 1>/dev/null 2>&1; then
    export PATH="$(ruby -r rubygems -e 'puts Gem.user_dir')/bin${PATH+:$PATH}"
fi

# If we've got anything in $HOME/opt/bin, make sure the shell looks at
# that first
export PATH="$HOME/opt/bin${PATH+:$PATH}"

# Set up nvm
export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"
